/**
 * 大二十面体
 */
class Great_Icosahedron {
    configure = () => {
        const { getLengthByPytha } = this.basis.geometry_calculator;

        // 五芒星比率
        // import RA_00 from "../module/ratio_five_pointed_star.js";
        const RA_00 = (1 + Math.sqrt(5)) / 2;

        // 正三角形比率
        // import RA_01 from "../module/ratio_equilateral_triangle.js";
        const RA_01 = {
            A: 1,
            B: Math.sqrt(3),
            C: 2
        };

        // [多面体の中心点]O00
        // [視点からの左右方向の軸]X軸
        // [視点からの上下方向の軸]Y軸
        // [視点からの前後方向の軸]Z軸
        // [点名の規則(原点)](大文字英字)(数字)
        // [点名の規則(原点に対する[多面体の中心点における対称点])](子文字英字)(数字)
        // [各点のX軸面上の透過点]X_(点名)
        // [各点のZ軸面上の透過点]Z_(点名)
        // [Z軸に垂直な[多面体の頂点から構成される最大の正三角形]]A11_A12_A13
        // [△A11_A12_A13]を含む面]A
        // [Z軸・面Aの交点]A00
        const A00_A11 = 1;
        // [A12_A13の中点]A21
        const A12_A21 = A00_A11 * (RA_01.B / RA_01.C);
        const A00_A21 = A00_A11 * (RA_01.A / RA_01.C);
        // [a12_a13と正三角形を構成する[多面体のもう1点の頂点]]B11
        // [Z軸に垂直な[B11を含む面]]B
        // [Z軸・面Bの交点]B00
        // [B11を含む[多面体の頂点から構成される正三角形]]B11_B12_B13
        // [B12_B13の中点]B21
        // [A11_B11の中点]X11
        const A11_X11 = A12_A21;
        const A11_B11 = A11_X11 * 2;
        // (01) 五角形B11_A12_b12_b13_A13は正五角形
        const b12_b21 = A12_A21 / RA_00;
        const A11_b12 = A11_B11;
        const A11_b21 = getLengthByPytha(A11_b12, b12_b21, null);
        const b21_X11 = getLengthByPytha(A11_b21, A11_X11, null);
        // (02) 五角形A11_a13_A12_B11_B12は正五角形
        // (03) 五角形A11_a21_A21_B11_B21は五角形A11_a13_A12_B11_B12のX軸に対する投影図形
        // (04) (02)(03)より O00_B21 = O00_X11 * 五芒星比率
        const O00_X11 = b21_X11 / (RA_00 + 1);
        const O00_A11 = getLengthByPytha(null, A11_X11, O00_X11);
        // [A12_A13・B11_b12の交点]A31
        // [A11_A13・B12_b13の交点]A32
        // [A11_A12・B13_b11の交点]A33
        // [A12_A13・B11_b13の交点]A34
        // [A11_A13・B12_b11の交点]A35
        // [A11_A12・B13_b12の交点]A36
        // (05) (01)より A21_A31 = b12_B21 / (五芒星比率 + 1)
        const A21_A31 = b12_b21 / (1 + RA_00);
        const A21_A34 = A21_A31;
        // (06) (02)(03)より O00_A21 = B11_X11 / 五芒星比率
        const B11_X11 = A11_X11;
        const O00_A21 = B11_X11 / RA_00;
        const A00_A31 = getLengthByPytha(null, A00_A21, A21_A31);
        const O00_A31 = getLengthByPytha(null, O00_A21, A21_A31);
        // [A11_A21・b21_X11の交点]A41
        // (07) (02)(03)より A11_A41 = A11_A21 * 五芒星比率 / (1 + 五芒星比率)
        const A11_A41 = (A00_A11 + A00_A21) * (RA_00 / (1 + RA_00));
        // (08) (02)(03)より A11_A41 = B11_B21
        const B11_B21 = A11_A41;
        const B00_B11 = B11_B21 * (RA_01.C / (RA_01.A + RA_01.C));
        const B00_B21 = B11_B21 * (RA_01.A / (RA_01.A + RA_01.C));
        const O00_b21 = b21_X11 - O00_X11;
        const O00_B21 = O00_b21;
        const O00_B00 = getLengthByPytha(O00_B21, B00_B21, null);
        // [A11_B11・a12_B13の交点]C11
        // [A12_B12・a13_B11の交点]C12
        // [A13_B13・a11_B12の交点]C13
        // [A11_B11・A12_B12の交点]D00
        // (09) △O00_B00_B21 ∽ △O00_X11_D00
        const O00_D00 = O00_B21 * (O00_X11 / O00_B00);
        // (10) A32_C12は[△B11_a12_a13・△A12_b13_B12の交線]
        // (11) a34_B11は[△B11_a12_a13・△A11_B11_b12の交線]
        // (12) B12_b13 // 面A11_a21_A21_B11_B21
        // (13) (03)(12)より A32_B12 = A41_B21
        // (14) (03)より A41_B21 = O00_B21 / 五芒星比率
        // (15) (13)(14)より [A32のA面上の座標]
        //     X = - B12_B21
        //     Y = ((B00_B21 * 2) / RA_00) - B00_B21
        const X_A32 = - b12_b21;
        const Y_A32 = ((B00_B21 * 2) / RA_00) - B00_B21;
        // (16) (03)より B11_C12 = B11_a13 / (1 + RA_00)
        // (17) (16)より [C12のA面上の座標]
        //     X = A12_A21 / (1 + RA_00)
        //     Y = A00_A21 - ((A00_A21 + B00_B11) / RA_00)
        const X_C12 = A12_A21 / (1 + RA_00);
        const Y_C12 = A00_A21 - ((A00_A21 + B00_B11) / RA_00);
        // (18) (15)(17)より [A32_C12のA面上の関数]
        //     ┌ A32: (X_A32, Y_A32) ∴ Y_A32 = (X_A32)A + B
        //     └ C12: (X_C12, Y_C12) ∴ Y_C12 = (X_C12)A + B
        //     A = (Y_A32 - Y_C12) / (X_A32 - X_C12)
        //     B = Y_A32 - ((X_A32) * (Y_A32 - Y_C12) / (X_A32 - X_C12))
        //     Y = ((Y_A32 - Y_C12) / (X_A32 - X_C12))X + Y_A32 - ((X_A32) * (Y_A32 - Y_C12) / (X_A32 - X_C12))
        const FA_A32_C12 = (Y_A32 - Y_C12) / (X_A32 - X_C12);
        const FB_A32_C12 = Y_A32 - ((X_A32) * (Y_A32 - Y_C12) / (X_A32 - X_C12));
        // (19) [a34_B11のA面上の関数]
        //     ┌ a34: (A21_A34,   A00_A21) ∴ A00_A21 = (A21_A34)A + B
        //     └ B11: (0,     - B00_B11) ∴ - B00_B11 = B
        //     A = (A00_A21 + B00_B11) / A21_A34
        //     Y = ((A00_A21 + B00_B11) / A21_A34)X - B00_B11
        const FA_a34_B11 = (A00_A21 + B00_B11) / A21_A34;
        const FB_a34_B11 = - B00_B11;
        // [A32_C12・a34_B11の交点]F11
        // [F11を含む[Z軸に垂直な面]]F
        // [Z軸・面Fの交点]F00
        // (20) (18)(19)より [F11のA面上の座標]
        //     ┌ A32_C12: Y = (FA_A32_C12)X + FB_A32_C12
        //     └ a34_B11: Y = (FA_a34_B11)X + FB_a34_B11
        //     X = (FB_a34_B11 - FB_A32_C12) / (FA_A32_C12 - FA_a34_B11)
        //     Y = (FA_A32_C12 * (FB_a34_B11 - FB_A32_C12) / (FA_A32_C12 - FA_a34_B11)) + FB_A32_C12
        const X_F11 = (FB_a34_B11 - FB_A32_C12) / (FA_A32_C12 - FA_a34_B11);
        const Y_F11 = ((FA_A32_C12) * (FB_a34_B11 - FB_A32_C12) / (FA_A32_C12 - FA_a34_B11)) + FB_A32_C12;
        const F00_F11 = getLengthByPytha(null, X_F11, Y_F11);
        const O00_a00 = getLengthByPytha(O00_A11, A00_A11, null);
        const a00_B00 = O00_B00 + O00_a00;
        const a00_F00 = a00_B00 - (a00_B00 * (X_F11 / A21_A34));
        const O00_F00 = a00_F00 - O00_a00;
        const O00_F11 = getLengthByPytha(null, O00_F00, F00_F11);
        // [A11_A31・A32_A33の交点]A51
        const O00_A00 = O00_a00;
        const O00_A51 = O00_F11;
        const A00_A51 = getLengthByPytha(O00_A51, O00_A00, null);
        // [A00_A21・A31_A32の交点]A61
        // (21) [A31_A32のA面上の関数]
        //     ┌ A31: (A21_A31, - A00_A21) ∴ - A00_A21 = (A21_A31)A + B
        //     └ A32: (X_A32,    Y_A32)  ∴ Y_A32 = (X_A32)A + B
        //     A = (Y_A32 + A00_A21) / (X_A32 - A21_A31)
        //     B = Y_A32 - (X_A32 * (Y_A32 + A00_A21) / (X_A32 - A21_A31))
        const FB_A31_A32 = Y_A32 - (X_A32 * (Y_A32 + A00_A21) / (X_A32 - A21_A31));
        // (22) (21)より [A61のA面上の座標]
        //     ┌ A00_A21: X = 0
        //     └ A31_A32: Y = (FA_A31_A32)X + FB_A31_A32
        //     Y = FB_A31_A32
        const A00_A61 = Math.abs(FB_A31_A32);
        // [A36_C13・B13_c11の交点]G11
        // [G11を含むZ軸に垂直な面]G
        // [Z軸・面Gの交点]G00
        // [ZA00_ZB11・ZA36_Zc13の交点]XH1
        // (X1) ZA36_ZB13
        //     = B00_B11 * (1 / (1 + RA_00))
        //     = B00_B11 * ((3 - √5) / 2)
        // (X2) Zc11_ZB11
        //     = B00_B11 * ((1 / 2) * ((2 * RA_00) / (1 + (2 * RA_00))))
        //     = B00_B11 * ((3 - √5) / 2)
        // (X3) ZA00_Zc11
        //     = B00_B11 - Zc11_ZB11
        //     = B00_B11 * ((√5 - 1) / 2)
        const C00_C12 = getLengthByPytha(null, X_C12, Y_C12);
        const c00_c11 = C00_C12;
        const B13_B21 = b12_b21;
        // (X4) c00_c11 = ZC00_ZC12
        // (X4.5) ZA00_XH1 = ZA36_ZB13 * (ZC00_ZC12 / (ZC00_ZC12 + B00_B11))
        // (X5) (X4)(X4.5)より ZA00_XH1
        //     = ZA36_ZB13 * (ZC00_ZC12 / (ZC00_ZC12 + B00_B11))
        //     = B00_B11 * ((7 - 3√5) / 2)
        // (X6) (X3)(X5)より Zc11_XH1
        //     = c00_c11 - ZA00_XH1
        //     = B00_B11 * (2√5 - 4)
        // (X7) △ZA36_ZB13_ZG11 ∽ △Zc11_XH1_ZG11
        // [A11_A21・A32_A36の交点]A81
        // [ZG11からのZA36_ZA81への垂線・ZA36_ZA81との交点]Ae
        // [ZG11からのZA36_ZB13への垂線・ZA36_ZB13との交点]Af
        // (X8) (X7)より ZA36_ZG11 = ZA36_XH1 * (ZA36_ZB13 / (ZA36_ZB13 + Zc11_XH1))
        // (X9) (X8)より Ae_ZG11 = ZA81_XH1 * (ZA36_ZB13 / (ZA36_ZB13 + Zc11_XH1))
        // (Xa) ZA81_ZB21 = ZA36_ZB13 = B00_B11 * ((3 - √5) / 2)
        // (Xb) A00_A81
        //     = A00_A21 - ZA81_ZB21
        //     = B00_B11 * ((√5 - 2) / 2)
        // (Xc) (Xb)より ZA81_XH1
        //     = A00_A81 + ZA00_XH1
        //     = B00_B11 * ((5 - 2√5) / 2)
        // (Xd) (X9)(Xc)より Ae_ZG11
        //     = ZA81_XH1 * (ZA36_ZB13 / (ZA36_ZB13 + Zc11_XH1))
        //     = B00_B11 * ((√5 - 2) / 2)
        // (Xe) (Xb)(Xd)より A00_A81 = Ae_ZG11
        // (Xf) (Xe)より ZG11のZ軸面上の座標
        //     ┌ Zc11_ZB13: Y = (Zc11_ZB21 / B13_B21)X - c00_c11
        //     └ Y = 0
        //     X = c00_c11 / C11_ZB21 * B13_B21
        const X_G11 = c00_c11 / (c00_c11 + B00_B21) * B13_B21;
        // (Xg) (01)より c11_b21 = B11_b21 / (1 + (五芒星比率 * 2))
        const B00_b00 = (O00_B00 * 2);
        const Z_G11 = ((B00_b00 * ((RA_00 * 2) / (1 + (RA_00 * 2)))) * (X_G11 / B13_B21)) - (O00_B00 - (B00_b00 / (1 + (RA_00 * 2))));
        const O00_G11 = getLengthByPytha(null, X_G11, Z_G11);
        // (Y1) A12_a31は△A11_A12_b13・△A12_b11_B12の交線
        // (Y2) Zc11_ZA36は△A11_A12_b13・△A13_b12_B13の交線
        // [A12_a31・c11_A36の交点]J1
        // (Y3) [A12_a31のA面上の関数]
        //     ┌ A12: (A12_A21, - A00_A21) ∴ - A00_A21 = (A12_A21)A + B
        //     └ a31: (- A21_A31, A00_A21) ∴ A00_A21 = - (A21_A31)A + B
        //     A = (A00_A21 + A00_A21) / - (A21_A31 + A12_A21)
        //     B = A00_A21 + (A21_A31 * (A00_A21 + A00_A21) / - (A21_A31 + A12_A21))
        const FA_A12_a31 = (A00_A21 * 2) / - (A21_A31 + A12_A21);
        const FB_A12_a31 = A00_A21 + (A21_A31 * (A00_A21 + A00_A21) / - (A21_A31 + A12_A21));
        // (Y4) [Zc11_ZA36のA面上の関数]
        //     ┌ Zc11: (0, - c00_c11) ∴ - c00_c11 = B
        //     └ ZA36: (B12_B21, Y_ZA36)  ∴ Y_ZA36 = (B12_B21)A + B
        //     A = (Y_ZA36 + c00_c11) / B12_B21
        const FA_ZA36_Xc11 = (Y_A32 + c00_c11) / B13_B21;
        const FB_ZA36_Xc11 = - c00_c11;
        // [J1のA面上の座標]
        //     ┌ A12_a31: Y = (FA_A12_a31)X + FB_A12_a31
        //     └ ZA36_Xc11: Y = (FA_ZA36_Xc11)X + FB_ZA36_Xc11
        //     X = (FB_ZA36_Xc11 - FB_A12_a31) / (FA_A12_a31 - FA_ZA36_Xc11)
        //     Y = (FA_A12_a31 * (FB_ZA36_Xc11 - FB_A12_a31) / (FA_A12_a31 - FA_ZA36_Xc11)) + FB_A12_a31
        const X_J1 = (FB_ZA36_Xc11 - FB_A12_a31) / (FA_A12_a31 - FA_ZA36_Xc11);
        const Y_J1 = (FA_A12_a31 * (FB_ZA36_Xc11 - FB_A12_a31) / (FA_A12_a31 - FA_ZA36_Xc11)) + FB_A12_a31;
        const J0_J1 = getLengthByPytha(null, X_J1, Y_J1);

        const TX_O00 = 0;
        const TX_A00 = Math.asin(A00_A11 / O00_A11);
        const TX_B00 = Math.asin(B00_B11 / O00_A11);
        const TX_C00 = Math.asin(A00_A31 / O00_A31);
        const TX_D00 = Math.acos(O00_X11 / O00_D00) * 2;
        const TX_F00 = Math.asin(F00_F11 / O00_F11);
        const TX_G00 = Math.asin(A00_A51 / O00_A51);
        const TX_H00 = Math.asin(A00_A61 / O00_F11);
        const TX_H01 = (Math.asin(A00_A21 / O00_A21) * 2) - Math.asin(A00_A61 / O00_F11);
        const TX_I00 = Math.asin(Math.abs(X_G11) / O00_G11);
        const TX_J00 = Math.asin(J0_J1 / O00_F11);

        const TY_A00 = 0;
        const TY_B00 = Math.PI;
        const TY_C00 = Math.PI - Math.asin(A21_A31 / A00_A31);
        const TY_C01 = Math.PI + Math.asin(A21_A31 / A00_A31);
        const TY_F00 = Math.PI - Math.asin(X_F11 / F00_F11);
        const TY_F01 = Math.PI + Math.asin(X_F11 / F00_F11);
        const TY_G00 = Math.asin(X_F11 / A00_A51);
        const TY_G01 = Math.asin(X_F11 / A00_A51) * -1;
        const TY_I00 = Math.PI * 3 / 2;
        const TY_I01 = Math.PI * ((3 / 2) + (1 / 3));
        const TY_J00 = Math.PI + Math.asin(X_J1 / J0_J1);
        const TY_J01 = Math.PI - Math.asin(X_J1 / J0_J1);

        const reles_base = [
            { code: "A1", index: 1, R: O00_A11, X: TX_A00, Y: TY_A00 },
            { code: "A3", index: 1, R: O00_A31, X: TX_C00, Y: TY_C00 },
            { code: "A3", index: 4, R: O00_A31, X: TX_C00, Y: TY_C01 },
            { code: "B1", index: 1, R: O00_A11, X: TX_B00, Y: TY_B00 },
            { code: "C1", index: 1, R: O00_D00, X: TX_D00, Y: TY_A00 },
            { code: "D0", index: 0, R: O00_D00, X: TX_O00, Y: TY_A00 },
            { code: "F1", index: 1, R: O00_F11, X: TX_F00, Y: TY_F00 },
            { code: "F1", index: 4, R: O00_F11, X: TX_F00, Y: TY_F01 },
            { code: "G1", index: 1, R: O00_F11, X: TX_G00, Y: TY_G00 },
            { code: "G1", index: 4, R: O00_F11, X: TX_G00, Y: TY_G01 },
            { code: "H1", index: 1, R: O00_F11, X: TX_H00, Y: TY_B00 },
            { code: "H1", index: 4, R: O00_F11, X: TX_H01, Y: TY_B00 },
            { code: "I1", index: 1, R: O00_G11, X: TX_I00, Y: TY_I00 },
            { code: "I1", index: 4, R: O00_G11, X: TX_I00, Y: TY_I01 },
            { code: "J1", index: 1, R: O00_F11, X: TX_J00, Y: TY_J00 },
            { code: "J1", index: 4, R: O00_F11, X: TX_J00, Y: TY_J01 },
        ];

        reles_base.forEach((rel_base) => {
            for (let n = 0; n < 3; n++) {
                const rel_code = `${rel_base.code}${rel_base.index + n}`;
                const rel = {
                    R: rel_base.R / O00_A11 * this.alpha,
                    X: rel_base.X,
                    Y: rel_base.Y + (Math.PI * 2 / 3 * n),
                };

                this.reles[rel_code] = { ...rel };
                this.reles[rel_code.toLowerCase()] = { ...rel, X: rel_base.X + Math.PI };
            }
        });

        this.surfaces = {
            D00_B11_F11: ['D00', 'B11', 'F11'], D00_B12_F12: ['D00', 'B12', 'F12'], D00_B13_F13: ['D00', 'B13', 'F13'],
            D00_B11_F14: ['D00', 'B11', 'F14'], D00_B12_F15: ['D00', 'B12', 'F15'], D00_B13_F16: ['D00', 'B13', 'F16'],
            d00_b11_f11: ['d00', 'b11', 'f11'], d00_b12_f12: ['d00', 'b12', 'f12'], d00_b13_f13: ['d00', 'b13', 'f13'],
            d00_b11_f14: ['d00', 'b11', 'f14'], d00_b12_f15: ['d00', 'b12', 'f15'], d00_b13_f16: ['d00', 'b13', 'f16'],

            D00_C11_F13: ['D00', 'C11', 'F13'], D00_C12_F11: ['D00', 'C12', 'F11'], D00_C13_F12: ['D00', 'C13', 'F12'],
            D00_C11_F15: ['D00', 'C11', 'F15'], D00_C12_F16: ['D00', 'C12', 'F16'], D00_C13_F14: ['D00', 'C13', 'F14'],
            d00_c11_f13: ['d00', 'c11', 'f13'], d00_c12_f11: ['d00', 'c12', 'f11'], d00_c13_f12: ['d00', 'c13', 'f12'],
            d00_c11_f15: ['d00', 'c11', 'f15'], d00_c12_f16: ['d00', 'c12', 'f16'], d00_c13_f14: ['d00', 'c13', 'f14'],

            B11_C12_F11: ['B11', 'C12', 'F11'], B12_C13_F12: ['B12', 'C13', 'F12'], B13_C11_F13: ['B13', 'C11', 'F13'],
            B11_C13_F14: ['B11', 'C13', 'F14'], B12_C11_F15: ['B12', 'C11', 'F15'], B13_C12_F16: ['B13', 'C12', 'F16'],
            b11_c12_f11: ['b11', 'c12', 'f11'], b12_c13_f12: ['b12', 'c13', 'f12'], b13_c11_f13: ['b13', 'c11', 'f13'],
            b11_c13_f14: ['b11', 'c13', 'f14'], b12_c11_f15: ['b12', 'c11', 'f15'], b13_c12_f16: ['b13', 'c12', 'f16'],

            A11_C11_G11: ['A11', 'C11', 'G11'], A12_C12_G12: ['A12', 'C12', 'G12'], A13_C13_G13: ['A13', 'C13', 'G13'],
            A11_C11_G14: ['A11', 'C11', 'G14'], A12_C12_G15: ['A12', 'C12', 'G15'], A13_C13_G16: ['A13', 'C13', 'G16'],
            a11_c11_g11: ['a11', 'c11', 'g11'], a12_c12_g12: ['a12', 'c12', 'g12'], a13_c13_g13: ['a13', 'c13', 'g13'],
            a11_c11_g14: ['a11', 'c11', 'g14'], a12_c12_g15: ['a12', 'c12', 'g15'], a13_c13_g16: ['a13', 'c13', 'g16'],

            A11_A33_G11: ['A11', 'A33', 'G11'], A12_A31_G12: ['A12', 'A31', 'G12'], A13_A32_G13: ['A13', 'A32', 'G13'],
            A11_A35_G14: ['A11', 'A35', 'G14'], A12_A36_G15: ['A12', 'A36', 'G15'], A13_A34_G16: ['A13', 'A34', 'G16'],
            a11_a33_g11: ['a11', 'a33', 'g11'], a12_a31_g12: ['a12', 'a31', 'g12'], a13_a32_g13: ['a13', 'a32', 'g13'],
            a11_a35_g14: ['a11', 'a35', 'g14'], a12_a36_g15: ['a12', 'a36', 'g15'], a13_a34_g16: ['a13', 'a34', 'g16'],

            A31_B11_H11: ['A31', 'B11', 'H11'], A32_B12_H12: ['A32', 'B12', 'H12'], A33_B13_H13: ['A33', 'B13', 'H13'],
            A34_B11_H11: ['A34', 'B11', 'H11'], A35_B12_H12: ['A35', 'B12', 'H12'], A36_B13_H13: ['A36', 'B13', 'H13'],
            a31_b11_h11: ['a31', 'b11', 'h11'], a32_b12_h12: ['a32', 'b12', 'h12'], a33_b13_h13: ['a33', 'b13', 'h13'],
            a34_b11_h11: ['a34', 'b11', 'h11'], a35_b12_h12: ['a35', 'b12', 'h12'], a36_b13_h13: ['a36', 'b13', 'h13'],

            A31_B11_I13: ['A31', 'B11', 'I13'], A32_B12_I11: ['A32', 'B12', 'I11'], A33_B13_I12: ['A33', 'B13', 'I12'],
            A34_B11_I16: ['A34', 'B11', 'I16'], A35_B12_I14: ['A35', 'B12', 'I14'], A36_B13_I15: ['A36', 'B13', 'I15'],
            a31_b11_I13: ['a31', 'b11', 'i13'], a32_b12_I11: ['a32', 'b12', 'i11'], a33_b13_I12: ['a33', 'b13', 'i12'],
            a34_b11_I16: ['a34', 'b11', 'i16'], a35_b12_I14: ['a35', 'b12', 'i14'], a36_b13_I15: ['a36', 'b13', 'i15'],

            B11_C12_I13: ['B11', 'C12', 'I13'], B12_C13_I11: ['B12', 'C13', 'I11'], B13_C11_I12: ['B13', 'C11', 'I12'],
            B11_C13_I16: ['B11', 'C13', 'I16'], B12_C11_I14: ['B12', 'C11', 'I14'], B13_C12_I15: ['B13', 'C12', 'I15'],
            b11_c12_i13: ['b11', 'c12', 'i13'], b12_c13_i11: ['b12', 'c13', 'i11'], b13_c11_i12: ['b13', 'c11', 'i12'],
            b11_c13_i16: ['b11', 'c13', 'i16'], b12_c11_i14: ['b12', 'c11', 'i14'], b13_c12_i15: ['b13', 'c12', 'i15'],

            A33_C11_I12: ['A33', 'C11', 'I12'], A31_C12_I13: ['A31', 'C12', 'I13'], A32_C13_I11: ['A32', 'C13', 'I11'],
            A35_C11_I14: ['A35', 'C11', 'I14'], A36_C12_I15: ['A36', 'C12', 'I15'], A34_C13_I16: ['A34', 'C13', 'I16'],
            a33_c11_i12: ['a33', 'c11', 'i12'], a31_c12_i13: ['a31', 'c12', 'i13'], a32_c13_i11: ['a32', 'c13', 'i11'],
            a35_c11_i14: ['a35', 'c11', 'i14'], a36_c12_i15: ['a36', 'c12', 'i15'], a34_c13_i16: ['a34', 'c13', 'i16'],

            A31_C12_G12: ['A31', 'C12', 'G12'], A32_C13_G13: ['A32', 'C13', 'G13'], A33_C11_G11: ['A33', 'C11', 'G11'],
            A34_C13_G16: ['A34', 'C13', 'G16'], A35_C11_G14: ['A35', 'C11', 'G14'], A36_C12_G15: ['A36', 'C12', 'G15'],
            a31_c12_g12: ['a31', 'c12', 'g12'], a32_c13_g13: ['a32', 'c13', 'g13'], a33_c11_g11: ['a33', 'c11', 'g11'],
            a34_c13_g16: ['a34', 'c13', 'g16'], a35_c11_g14: ['a35', 'c11', 'g14'], a36_c12_g15: ['a36', 'c12', 'g15'],

            A31_A34_H11: ['A31', 'A34', 'H11'], A32_A35_H12: ['A32', 'A35', 'H12'], A33_A36_H13: ['A33', 'A36', 'H13'],
            A31_A34_H14: ['A31', 'A34', 'H14'], A32_A35_H15: ['A32', 'A35', 'H15'], A33_A36_H16: ['A33', 'A36', 'H16'],
            a31_a34_h11: ['a31', 'a34', 'h11'], a32_a35_h12: ['a32', 'a35', 'h12'], a33_a36_h13: ['a33', 'a36', 'h13'],
            a31_a34_h14: ['a31', 'a34', 'h14'], a32_a35_h15: ['a32', 'a35', 'h15'], a33_a36_h16: ['a33', 'a36', 'h16'],

            A11_a31_h14: ['A11', 'a31', 'h14'], A12_a32_h15: ['A12', 'a32', 'h15'], A13_a33_h16: ['A13', 'a33', 'h16'],
            A11_a34_h14: ['A11', 'a34', 'h14'], A12_a35_h15: ['A12', 'a35', 'h15'], A13_a36_h16: ['A13', 'a36', 'h16'],
            a11_A31_H14: ['a11', 'A31', 'H14'], a12_A32_H15: ['a12', 'A32', 'H15'], a13_A33_H16: ['a13', 'A33', 'H16'],
            a11_A34_H14: ['a11', 'A34', 'H14'], a12_A35_H15: ['a12', 'A35', 'H15'], a13_A36_H16: ['a13', 'A36', 'H16'],

            A11_A33_J12: ['A11', 'A33', 'J12'], A12_A31_J13: ['A12', 'A31', 'J13'], A13_A32_J11: ['A13', 'A32', 'J11'],
            A11_a34_J12: ['A11', 'a34', 'J12'], A12_a35_J13: ['A12', 'a35', 'J13'], A13_a36_J11: ['A13', 'a36', 'J11'],
            a11_a33_j12: ['a11', 'a33', 'j12'], a12_a31_j13: ['a12', 'a31', 'j13'], a13_a32_j11: ['a13', 'a32', 'j11'],
            a11_A34_j12: ['a11', 'A34', 'j12'], a12_A35_j13: ['a12', 'A35', 'j13'], a13_A36_j11: ['a13', 'A36', 'j11'],

            A31_a35_J13: ['A31', 'a35', 'J13'], A32_a36_J11: ['A32', 'a36', 'J11'], A33_a34_J12: ['A33', 'a34', 'J12'],
            A31_a35_j16: ['A31', 'a35', 'j16'], A32_a36_j14: ['A32', 'a36', 'j14'], A33_a34_j15: ['A33', 'a34', 'j15'],
            a31_A35_j13: ['a31', 'A35', 'j13'], a32_A36_j11: ['a32', 'A36', 'j11'], a33_A34_j12: ['a33', 'A34', 'j12'],
            a31_A35_J16: ['a31', 'A35', 'J16'], a32_A36_J14: ['a32', 'A36', 'J14'], a33_A34_J15: ['a33', 'A34', 'J15'],

            A11_a31_J16: ['A11', 'a31', 'J16'], A12_a32_J14: ['A12', 'a32', 'J14'], A13_a33_J15: ['A13', 'a33', 'J15'],
            A11_a35_J16: ['A11', 'A35', 'J16'], A12_a36_J14: ['A12', 'A36', 'J14'], A13_a37_J15: ['A13', 'A34', 'J15'],
            a11_A31_j16: ['a11', 'A31', 'j16'], a12_A32_j14: ['a12', 'A32', 'j14'], a13_A33_j15: ['a13', 'A33', 'j15'],
            a11_A35_j16: ['a11', 'a35', 'j16'], a12_A36_j14: ['a12', 'a36', 'j14'], a13_A34_j15: ['a13', 'a34', 'j15'],

            A11_A35_J16: ['A11', 'A35', 'J16'], A12_A36_J14: ['A12', 'A36', 'J14'], A13_A34_J15: ['A13', 'A34', 'J15'],
            A11_A31_J16: ['A11', 'a31', 'J16'], A12_A32_J14: ['A12', 'a32', 'J14'], A13_A33_J15: ['A13', 'a33', 'J15'],
            a11_a35_j16: ['a11', 'a35', 'j16'], a12_a36_j14: ['a12', 'a36', 'j14'], a13_a34_j15: ['a13', 'a34', 'j15'],
            a11_a31_j16: ['a11', 'A31', 'j16'], a12_a32_j14: ['a12', 'A32', 'j14'], a13_a33_j15: ['a13', 'A33', 'j15'],
        };
    }
}
